// This service worker is deprecated
var CACHE_NAME = "sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:"");

self.addEventListener('install', function(event) {
  // Perform install steps
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(function(cache) {
        // Get the assets manifest so we can see what our js file is named
        // This is because webpack hashes it
        fetch('asset-manifest.json')
          .then(response => {
            response.json()
          })
          .then(assets => {
            // Open a cache and cache our files
            // We want to cache the page and the main.js generated by webpack
            // We could also cache any static assets like CSS or images
            var urlsToCache = ['/'];
            for (var key in assets) {
              urlsToCache.push(assets[key]); // prefer ES5 syntax
            }
            cache.addAll(urlsToCache);
            console.log('Service worker installed');
          })
      })
  );
});

self.addEventListener('fetch', function(event) {
  event.respondWith(
    caches.match(event.request)
      .then(function(response) {
        // Cache hit - return response
        if (response) {
          return response;
        }

        // IMPORTANT: Clone the request. A request is a stream and
        // can only be consumed once. Since we are consuming this
        // once by cache and once by the browser for fetch, we need
        // to clone the response.
        var fetchRequest = event.request.clone();

        return fetch(fetchRequest).then(
          function(response) {
            // Check if we received a valid response
            if (!response || Math.floor(response.status / 100) !== 2 || response.type !== 'basic') {
              return response;
            }
            
            // Avoid caching /api path
            if (fetchRequest.url.indexOf('/api/') >= 0) {
              // don't cache this path
              return response;
            }

            // Cache others

            // IMPORTANT: Clone the response. A response is a stream
            // and because we want the browser to consume the response
            // as well as the cache consuming the response, we need
            // to clone it so we have two streams.
            var responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then(function(cache) {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
  );
});

self.addEventListener('activate', function(event) {
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
  console.log('Service worker activated')
});